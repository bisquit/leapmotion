package core {	import flash.events.Event;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;		import a24.tween.Tween24;		import objects.Star;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.utils.setTimeout;	import flash.utils.setInterval;	import flash.utils.clearInterval;		public class SoundManager {				//private static var ch:SoundChannel;		//private static var tf:SoundTransform;		//private static var _timer:uint;		private static var _timer:Timer;				[Embed(source = "../assets/sounds/opening.mp3")]		private var OpeningSnd:Class;		[Embed(source = "../assets/sounds/ending.mp3")]		private var EndingSnd:Class;		[Embed(source = "../assets/sounds/Grab.mp3")]		private var Grab:Class;		[Embed(source = "../assets/sounds/Select.mp3")]		private var Select:Class;		[Embed(source = "../assets/sounds/Club_of_the_universe.mp3")]		private var Universe:Class;		[Embed(source = "../assets/sounds/Bustling_space2_edit.mp3")]		private var Bustling:Class;		[Embed(source = "../assets/sounds/Pass3.mp3")]		private var Kira:Class;		[Embed(source = "../assets/sounds/Miss.mp3")]		private var Miss1:Class;		[Embed(source = "../assets/sounds/Miss2.mp3")]		private var Miss2:Class;		[Embed(source = "../assets/sounds/Combo.mp3")]		private var Combo1:Class;		[Embed(source = "../assets/sounds/Combo2.mp3")]		private var Combo2:Class;		[Embed(source = "../assets/sounds/Combo3.mp3")]		private var Combo3:Class;		[Embed(source = "../assets/sounds/Combo4.mp3")]		private var Combo4:Class;		[Embed(source = "../assets/sounds/Last_10.mp3")]		private var Last_10:Class;		[Embed(source = "../assets/sounds/Star_Get.mp3")]		private var Star_Get:Class;		[Embed(source = "../assets/sounds/Club_of_the_universe.mp3")]		private var Club:Class;		[Embed(source = "../assets/sounds/Romp in the univers2.mp3")]		private var Romp:Class;						private static var Sounds:Vector.<Sound>;				private static var soundList:Object = {			"opening": 0,			"ending": 1,			"grab": 2,			"select": 3,			"uni": 4,			"bustling": 5,			"kira": 6,			"miss1": 7,			"miss2": 8,			"combo1": 9,			"combo2": 10,			"combo3": 11,			"combo4": 12,			"last10": 13,			"starget": 14,			"club": 15,			"romp": 16		}				private static var channelList:Vector.<SoundChannel>;				public function SoundManager() {			Sounds = new Vector.<Sound>();			Sounds.push(new OpeningSnd());			Sounds.push(new EndingSnd());			Sounds.push(new Grab());			Sounds.push(new Select());			Sounds.push(new Universe());			Sounds.push(new Bustling());			Sounds.push(new Kira());			Sounds.push(new Miss1());			Sounds.push(new Miss2());			Sounds.push(new Combo1());			Sounds.push(new Combo2());			Sounds.push(new Combo3());			Sounds.push(new Combo4());			Sounds.push(new Last_10());			Sounds.push(new Star_Get());			Sounds.push(new Club());			Sounds.push(new Romp());						channelList = new Vector.<SoundChannel>(30);		}				public static function play(name:String, loop:Boolean = false, vol:Number = 1):void {			var loopNum:int = 0;						var ch:SoundChannel = Sounds[soundList[name]].play(0, loopNum);			var tf:SoundTransform = ch.soundTransform;			tf.volume = vol;			ch.soundTransform = tf;							channelList[soundList[name]] = ch;						if(loop){				//loopNum = 100;				switch(name){					case "opening":					  _timer = new Timer(16000);					  break;					case "ending":					  _timer = new Timer(31800);					  break;					case "bustling":					  _timer = new Timer(31900);					  break;					case "club":					  _timer = new Timer(22900);					  break;					case "romp":					  _timer = new Timer(27900);					  break;					case "last10":					  _timer = new Timer(10000);					  break;				}				_timer.addEventListener(TimerEvent.TIMER, onLoop);			    _timer.start();			}						function onLoop(e:Event = null):void {				restartSound(name, vol);			}					}				public static function fadeOut(name:String):void {			if(_timer){				_timer.stop();			}			var ch = channelList[soundList[name]];			if(!ch){				return;			}			var tf = ch.soundTransform;			Tween24.tween(tf, 1, Tween24.ease.CircOut, { volume: 0 }).onUpdate(updateTransform).onComplete(onCompleteSound).play();			function updateTransform():void {				ch.soundTransform = tf;			}			function onCompleteSound():void {				ch.stop();			}		}				private static function restartSound(n:String, v:Number):void {			var ch = Sounds[soundList[n]].play(0, 1);			var tf = ch.soundTransform;			tf.volume = v;			ch.soundTransform = tf;						channelList[soundList[n]] = ch;		}	}	}
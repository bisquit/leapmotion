package  leap{	import com.leapmotion.leap.Controller;	import com.leapmotion.leap.events.LeapEvent;	import flash.display.Sprite;	import com.leapmotion.leap.Hand;		public class LeapInit extends Sprite{		private var controller:Controller;				private var catchReady:Boolean;				/* ステージとリープ仮想スクリーン関連 */		private var stageWidth:Number;		private var stageHeight:Number;		private var xScale:Number;		private var yScale:Number;				private var playerWidth:Number;		private var playerHeight:Number;				public function LeapInit(_stage, player_width, player_height) {						stageWidth = _stage.stageWidth;			stageHeight = _stage.stageHeight;			xScale = LeapInterface.xScale(stageWidth);			yScale = LeapInterface.yScale(stageHeight);						playerWidth = player_width as Number;			playerHeight = player_height as Number;						catchReady = false;						controller = new Controller();			controller.addEventListener(LeapEvent.LEAPMOTION_CONNECTED, onLeapConnect);			controller.addEventListener(LeapEvent.LEAPMOTION_FRAME, onLeapFrame);		}				private function onLeapConnect(e:LeapEvent):void{					}				private function onLeapFrame(e:LeapEvent):void{						var hands:Vector.<Hand> = e.frame.hands;			if(hands.length > 0){								var hand:Hand = hands[0];								// 一定の閾値を超えたら除外				if(hand.palmPosition.z > 300 || hand.palmPosition.z < -300 ||				   hand.palmPosition.x > LeapInterface.halfWidth + LeapInterface.margin ||				   hand.palmPosition.x < -LeapInterface.halfWidth - LeapInterface.margin ||				   hand.palmPosition.y > LeapInterface.top + LeapInterface.margin ||				   hand.palmPosition.y < LeapInterface.bottom - LeapInterface.margin){					catchReady = false;					return;				}								// 一定の回転によっても除外				if(hand.palmNormal.y > - 0.7){					catchReady = false;					return;				}									// 手が開かれていない時				if( !catchReady ){					// 指を４本以上認識したら手が開いた状態と評価する					if(hand.fingers.length >= 4){						catchReady = true;					}									// 手が開かれた時				}else if( catchReady ){										// 指が１本以下になったら手を握った状態と評価する					if(hand.fingers.length <= 1){						catchReady = false;						trace("catch");												if(LeapInterface.isCollide){							LeapInterface.collideStar.delete_flag = true;							LeapInterface.endCollision();						}					}				}								LeapInterface.Sx =  hand.palmPosition.x * xScale  +  stageWidth / 2;				if(LeapInterface.Sx > stageWidth - playerWidth / 2){					LeapInterface.Sx = stageWidth - playerWidth / 2;				}else if(LeapInterface.Sx < playerWidth /2){					LeapInterface.Sx = playerWidth /2;				}								LeapInterface.Sy = stageHeight  -  ( hand.palmPosition.y - LeapInterface.bottom ) * yScale;				if(LeapInterface.Sy > stageHeight - playerHeight / 2){					LeapInterface.Sy = stageHeight - playerHeight / 2;				}else if(LeapInterface.Sy < playerHeight / 2){					LeapInterface.Sy = playerHeight / 2;				}											} // if ( hands.length > 0 )					} // onLeapFrame	}	}
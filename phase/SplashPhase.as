package phase{	import flash.display.Bitmap;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Point;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.utils.setTimeout;		import a24.tween.Tween24;		import core.Mediator;	import core.PhaseManager;	import core.SoundManager;		import leap.HandState;		import objects.Catchable;	import objects.Star04;	public class SplashPhase extends Sprite implements IPhase {		private var logo:Catchable;		private var icon_glove:MovieClip;		private var black_screen:Sprite;				private var frame:int;		private var tween:Tween24;				private var count:uint;		private var starArr:Array;		private var starSp:Sprite;				public function SplashPhase() {									/*var icon_open:Bitmap = new IconOpenImage();			icon_open.scaleX = icon_open.scaleY = 0.5;			icon_open.x = Mediator.stageWidth / 2 + 160 + txt_start.width / 2;			icon_open.y = Mediator.stageHeight / 2 - icon_open.height / 2 + logo.height / 1.5;			addChild(icon_open);			mc_icon = new IconSwf();			mc_icon.scaleX = mc_icon.scaleY = 0.5;			mc_icon.x = Mediator.stageWidth / 2 + 160 + txt_start.width / 2 + mc_icon.width / 4;			mc_icon.y = Mediator.stageHeight / 2 - icon_open.height / 2 + logo.height / 1.5 + mc_icon.height / 4;*/						//snd = new OpeningSnd();						/*tween = Tween24.loop(3,						Tween24.tween(logo, 0.01).$x(6),						Tween24.tween(logo, 0.01).$x(0),						Tween24.tween(logo, 0.01).$x(-6),						Tween24.tween(logo, 0.01).$x(0)					);*/			 /*tween = Tween24.loop(0,								 Tween24.tween(logo, 0.6, Tween24.ease.CircOut).$y(-30),								 Tween24.tween(logo, 0.6, Tween24.ease.CircIn).$y(0)								 );*/		}		public function start():void {			trace("splash start");			Mediator._stage.addChild(this);			Mediator._player.visible = false;			Mediator._stage.addChild(Mediator._player);			Mediator._stage.addChild(Mediator._black);
			
			starSp = new Sprite();
			addChild(starSp);
			count = 0;
			frame = 0;
			starArr = new Array();

			logo = new Catchable("logo");
			logo.x = Mediator.stageWidth / 2;
			logo.y = Mediator.stageHeight / 2;
			addChild(logo);
			
			icon_glove = new IconGlove();
			icon_glove.x = logo.x + logo.width/2 + 40;
			icon_glove.y = logo.y + logo.height/2 + 30;
			addChild(icon_glove);			Mediator._black.fadeLight();			Mediator.currentPhase = "splash";			Mediator.initialize();						SoundManager.play("opening", true, 0.1);			/*ch = snd.play(0, 100);			tf = ch.soundTransform;			tf.volume = 0.1;			ch.soundTransform = tf;						ch.addEventListener(Event.SOUND_COMPLETE, restartSound);*/						/* タイトルロゴも掴める対象にする */			Mediator.debArr.push(logo);						addEventListener(Event.ENTER_FRAME, onFrame);			//			setTimeout(afterCatch, 2000);

		}		private function onFrame(e:Event):void {			if (logo.isCollided) {				if (frame === 0) {					logo.scaleX = logo.scaleY = 1.3;					//tween.play();				}				frame++;			} else {				if (frame > 0) {					logo.scaleX = logo.scaleY = 1;					//tween.stop();				}				frame = 0;			}						// 星の座標更新			for(var i:uint = 0; i < starArr.length; i++ ){				var star:Star04 = starArr[i];								// 加速度を速度に加算				if (star.vx > 0) {					star.vx +=  star.acceleration;				} else {					star.vx -=  star.acceleration;				}				star.vy +=  star.acceleration;				star.x +=  star.vx;				star.y +=  star.vy;								if (star.x <  -  star.width / 2 || star.x > this.stage.width + star.width / 2 || star.y <  -  star.height / 2 || star.y > this.stage.height + star.height / 2) {					starSp.removeChild(star);					starArr.splice(i, 1);				}			}						if(count == 50) {				createStar();				count = 0;			}						count++;		}				private function createStar():void {			var star:Star04 = new Star04(this.stage.width, this.stage.height);			starArr.push(star);			starSp.addChild(star);		}		public function afterCatch(info:Object = null):void {						SoundManager.play("select", false, 0.5);						/* 画面を暗くする */			Mediator._black.fadeDark(PhaseManager.nextPhase);						//Mediator.debArr.pop();						/* BGMをフェードアウト */			SoundManager.fadeOut("opening");		}		public function destroy():void {			trace("splash destroy");			removeEventListener(Event.ENTER_FRAME, onFrame);			removeChildren();			logo.destroy();			logo = null;			icon_glove = null;		    tween = null;			starArr = null;			Mediator._stage.removeChild(this);		}	}}
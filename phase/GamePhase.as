package  phase {	import flash.display.Bitmap;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Point;	import flash.text.TextField;	import flash.utils.getQualifiedClassName;	import flash.utils.setTimeout;		import a24.tween.Tween24;		import core.Mediator;	import core.PhaseManager;		import objects.Comet;	import objects.Dust;	import objects.Star;	import objects.Star04;	import objects.TimerField;	import objects.UFO;		import phase.IPhase;	import leap.LeapSystem;	import objects.PopupText;	import leap.HandState;	import ranking.Camera_Ranking;	import core.SoundManager;	import flash.display.MovieClip;		public class GamePhase extends Sprite implements IPhase{				private var count:int;		private var stageWidth:int;		private var stageHeight:int;		private var star_R:int;				private var timer:TimerField;		private var lastMulti:int = 1;		private var multiplier:int = 1;				private var samp:Bitmap;				private var div:Number;				private var music_flag:Boolean;				[Embed(source="../assets/images/sample.png")]		private var SampleImg:Class;				[Embed(source="../assets/images/count_3.png")]		private var Count3Img:Class;		[Embed(source="../assets/images/count_2.png")]		private var Count2Img:Class;		[Embed(source="../assets/images/count_1.png")]		private var Count1Img:Class;		[Embed(source="../assets/images/count_start.png")]		private var CountStartImg:Class;		[Embed(source="../assets/images/count_timeup.png")]		private var CountTimeupImg:Class;				public function GamePhase() {					}				public function start():void {						count = 0;			stageWidth = Mediator._stage.stageWidth;			stageHeight = Mediator._stage.stageHeight;						trace("game start");			Mediator._stage.addChild(this);			Mediator._stage.setChildIndex(Mediator._player, Mediator._stage.numChildren - 1);			Mediator._stage.setChildIndex(Mediator._black, Mediator._stage.numChildren - 1);			Mediator.currentPhase = "game";						/* オブジェクトの生成と初期配置 */			samp = new SampleImg();			samp.x = -samp.width;			samp.y = Mediator.stageHeight - samp.height;						timer = new TimerField();			timer.x = 20;			timer.y = 20;						Mediator._score.x = 60;			Mediator._score.y = 130;						music_flag = false;						/* オブジェクトの追加　重なり順に注意する*/			addChild(Mediator._score);			addChild(timer);			addChild(samp);						var three:Bitmap = new Count3Img();			var two:Bitmap = new Count2Img();			var one:Bitmap = new Count1Img();			var go:Bitmap = new CountStartImg();						three.scaleX = three.scaleY =			  two.scaleX = two.scaleY =			    one.scaleX = one.scaleY = 0.6;		    go.scaleX = go.scaleY = 0.45;						three.x = two.x = one.x = Mediator.stageWidth / 2 - three.width / 2;			three.y = two.y = one.y = Mediator.stageHeight / 2 - three.height / 2;			go.x = Mediator.stageWidth / 2 - go.width / 2;			go.y = Mediator.stageHeight / 2 - go.height / 2;						addChild(three);			addChild(two);			addChild(one);			addChild(go);						Tween24.serial(				Tween24.prop(three).fadeOut(),				Tween24.prop(two).fadeOut(),				Tween24.prop(one).fadeOut(),				Tween24.prop(go).fadeOut(),				/*Tween24.parallel(					Tween24.serial(						Tween24.tween(three, 0.8).fadeIn(),						Tween24.tween(three, 0.2).fadeOut()					),					Tween24.tween(three, 1).scale(1.2)				),				Tween24.parallel(					Tween24.serial(						Tween24.tween(two, 0.8).fadeIn(),						Tween24.tween(two, 0.2).fadeOut()					),					Tween24.tween(two, 1).scale(1.2)				),				Tween24.parallel(					Tween24.serial(						Tween24.tween(one, 0.8).fadeIn(),						Tween24.tween(one, 0.2).fadeOut()					),					Tween24.tween(one, 1).scale(1.2)				),				Tween24.parallel(					Tween24.serial(						Tween24.tween(go, 0.8).fadeIn(),						Tween24.tween(go, 0.2).fadeOut()					),					Tween24.tween(go, 1).scale(1.2)				)*/				Tween24.tween(three, 0.8).fadeIn(),				Tween24.tween(three, 0.2).fadeOut(),				Tween24.tween(two, 0.8).fadeIn(),				Tween24.tween(two, 0.2).fadeOut(),				Tween24.tween(one, 0.8).fadeIn(),				Tween24.tween(one, 0.2).fadeOut(),				Tween24.serial(				Tween24.parallel(					Tween24.tween(go, 0.8).fadeIn(),					Tween24.tween(go, 1, Tween24.ease.BackOut).$y(-30)				),				Tween24.tween(go, 0.2).alpha(0)				)			).onComplete(timerStart).play();				/* オブジェクトのトゥイーン　終了と同時にタイマーをスタートさせる */			/*Tween24.serial(				Tween24.tween(samp, 2).x(80)   			).play();*/		}				private function timerStart():void {			timer.start(3);			addEventListener(Event.ENTER_FRAME, onFrame);		}				private function onFrame(e:Event):void {						// 残り時間に応じて星の出現数を制限			if(timer.time <= 10){				div = 50;								if(!music_flag){					SoundManager.fadeOut("bustling");					SoundManager.play("last10", true, 0.5);					music_flag = true;				}							} else{				div = 20;			}						if(count %div === 0){				var random_value:Number = Math.random();				if(random_value > 0.8) {					createComet();				} else if(random_value < 0.2) {					createUFO();				} else {					createStar();					}			}						count++;					}				public function afterCatch(info:Object = null):void {			createDust(info);			popupMulti(info.combo);			//SoundManager.play("shine", false);			//popupPoint(info.totalPoint);		}				private function createStar():void {			var star:Star04 = new Star04(stageWidth, stageHeight);			Mediator.debArr.push(star);			addChild(star);		}				private function createComet():void {			var comet:Comet = new Comet(stageWidth, stageHeight);			Mediator.debArr.push(comet);			addChild(comet);		}				private function createUFO():void {			var ufo:UFO = new UFO(stageWidth, stageHeight);			Mediator.debArr.push(ufo);			addChild(ufo);		}				public function createDust(info):void {						var colStarClass:String = info.name as String;			var dust_num:Number = 0;						if(colStarClass == "star"){				dust_num = 10;			} else if(colStarClass == "comet"){				dust_num = 50;			}						for(var i:uint = 0; i < dust_num; i++){				var d:Dust = new Dust(info.x, info.y);				Mediator.dustArr.push(d);				addChild(d);			}		}				private function popupMulti(_combo:int):void {			multiplier = Math.floor(_combo * 0.2) + 1;			if(lastMulti < multiplier){				var popup:PopupText = new PopupText("x" + multiplier.toString(), 60, multiplier-1);				popup.x = Mediator._player.x + 90;				popup.y = Mediator._player.y - 40;				addChild(popup);				SoundManager.play("combo1", false, 0.5);								lastMulti = multiplier;			} else if (lastMulti > multiplier){				lastMulti = 1;			}		}				/*private function popupPoint(_point:int):void {			var popup:PopupText = new PopupText(_point * multiplier);			popup.x = Mediator._player.x + 75;			popup.y = Mediator._player.y - 40;			addChild(popup);			popup.animate∂();		}*/				public function end():void {			trace("time over");						Mediator.cr.takePicture();						var timeup:Bitmap = new CountTimeupImg();			timeup.scaleX = timeup.scaleY = 0.45;			timeup.x = Mediator.stageWidth / 2 - timeup.width / 2;			timeup.y = Mediator.stageHeight / 2 - timeup.height / 2;			timeup.alpha = 0;			addChild(timeup);			Tween24.serial(				Tween24.parallel(					Tween24.tween(timeup, 1.6).alpha(2),					Tween24.tween(timeup, 1.5, Tween24.ease.BackOut).$y(-30)				),				Tween24.tween(timeup, 1.2).alpha(0)			).play();						/* 星の生成はもうおしまい */			removeEventListener(Event.ENTER_FRAME, onFrame);						/* かわりに動かす星や塵が画面上からなくなったかをチェック！ */			addEventListener(Event.ENTER_FRAME, checkScreen);						/* いったんループを止める */			//LeapSystem.dispose();			//Mediator.dispose();						//PhaseManager.nextPhase();		}				private function checkScreen(e:Event):void {			trace("debarr:" + Mediator.debArr.length);			trace("dustarr:" + Mediator.dustArr.length);			if(Mediator.debArr.length === 0){				if(Mediator.dustArr.length === 0){										removeEventListener(Event.ENTER_FRAME, checkScreen);										/* いったんループを止める */					//LeapSystem.dispose();					//Mediator.dispose();										Mediator._black.fadeDark(photoAndNext);				}			}		}				private function photoAndNext(){						Mediator._player.reset();						SoundManager.fadeOut("last10");						// カメラを撮ってデータベースに保存			Mediator.cr.insertScore(Mediator._score.score);//		    PhaseManager.nextPhase();		}				public function destroy():void {			trace("game destroy");			removeChildren();			timer.destroy();			timer = null;			Mediator._stage.removeChild(this);		}	}	}
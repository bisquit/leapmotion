package  phase {	import flash.display.Bitmap;	import flash.display.Sprite;	import flash.events.Event;	import flash.utils.getQualifiedClassName;		import core.Mediator;	import core.PhaseManager;		import objects.Comet;	import objects.Dust;	import objects.Star;	import objects.Star04;	import objects.TimerField;	import objects.UFO;		import phase.IPhase;	import a24.tween.Tween24;	import flash.text.TextField;	import objects.PopupText;	import flash.geom.Point;		public class GamePhase extends Sprite implements IPhase{				private var count:int;		private var stageWidth:int;		private var stageHeight:int;		private var star_R:int;				private var timer:TimerField;				private var samp:Bitmap;				[Embed(source="../assets/images/sample.png")]		private var SampleImg:Class;				public function GamePhase() {			count = 0;			stageWidth = Mediator._stage.stageWidth;			stageHeight = Mediator._stage.stageHeight;			star_R = 20;		}				public function start():void {			trace("game start");			this.name = "GamePhase";			Mediator._stage.addChild(this);			Mediator._stage.setChildIndex(Mediator._player, Mediator._stage.numChildren - 1);			Mediator.currentPhase = "game";						/* オブジェクトの生成と初期配置 */			samp = new SampleImg();			samp.x = -samp.width;			samp.y = Mediator.stageHeight - samp.height;						timer = new TimerField();			timer.x = Mediator.stageWidth - 400;						Mediator._score.x = 120;			Mediator._score.y = 50;						/* オブジェクトの追加　重なり順に注意する*/			addChild(Mediator._score);			addChild(timer);			addChild(samp);						timerStart();						/* オブジェクトのトゥイーン　終了と同時にタイマーをスタートさせる */			Tween24.serial(				Tween24.tween(samp, 2).x(80)   			).play();		}				private function timerStart():void {			timer.start(600);			addEventListener(Event.ENTER_FRAME, onFrame);		}				private function onFrame(e:Event):void {						if(count %50 === 0){				var random_value:Number = Math.random();				if(random_value > 0.8) {					createComet();				} else if(random_value < 0.2) {					createUFO();				} else {					createStar();					}			}						count++;						// dustのアニメーション			for(var i:uint=0; i < Mediator.dustArr.length; i++){								// dustの拡大縮小				if(Mediator.dustArr[i].scaleX >= 1) {					Mediator.dustArr[i].scale_v = -0.2;				} else if(Mediator.dustArr[i].scaleX <= 0) {					Mediator.dustArr[i].scale_v = 0.2;				}				Mediator.dustArr[i].scaleX += Mediator.dustArr[i].scale_v;				Mediator.dustArr[i].scaleY += Mediator.dustArr[i].scale_v;								var d:Dust = Mediator.dustArr[i];				d.counter++;				d.bezier_trace();								if(d.counter == d.divNum) {					removeChild(d);					Mediator.dustArr.splice(i, 1);					if(i === 0){						Mediator._score.changeScore(); // 複数回呼ばれてしまうしUFOの時にも呼ばないと　あとで直す					}									}			}					}				public function afterCatch(info:Object):void {			createDust(info);			popupPoint(info.totalPoint);		}				private function createStar():void {			var star:Star04 = new Star04(stageWidth, stageHeight);			Mediator.debArr.push(star);			addChild(star);		}				private function createComet():void {			var comet:Comet = new Comet(stageWidth, stageHeight);			Mediator.debArr.push(comet);			addChild(comet);		}				private function createUFO():void {			var ufo:UFO = new UFO(stageWidth, stageHeight);			Mediator.debArr.push(ufo);			addChild(ufo);		}				public function createDust(info):void {			//var colStarClass:String = getQualifiedClassName(Mediator.collideStar);			var colStarClass:String = info.name as String;			var dust_num:Number = 0;						if(colStarClass == "star"){				dust_num = 10;			} else if(colStarClass == "comet"){				dust_num = 50;			}						for(var i:uint = 0; i < dust_num; i++){				var d:Dust = new Dust(info.x, info.y);				Mediator.dustArr.push(d);				addChild(d);			}		}				private function popupPoint(_point:int):void {			var popup:PopupText = new PopupText(_point);			popup.x = Mediator._player.x + 75;			popup.y = Mediator._player.y - 40;			addChild(popup);			popup.animate();		}				public function end():void {			trace("time over");			PhaseManager.nextPhase();		}				public function destroy():void {			trace("game destroy");			removeEventListener(Event.ENTER_FRAME, onFrame);			Mediator._stage.removeChild(this);		}	}	}
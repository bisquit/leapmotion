package{	import flash.display.MovieClip;	import flash.display.StageAlign;	import flash.display.StageScaleMode;		import starling.core.Starling;		[SWF(width = 1000, height = 750, frameRate = "60", backgroundColor = "#000000")]	public class LeapMotionGame_Starling extends MovieClip	{				public var main:Main;				public function LeapMotionGame_Starling()		{			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;						Starling.handleLostContext = true;			var starling:Starling = new Starling(MainView, stage, null, null);			starling.enableErrorChecking = false;			starling.start();						main = new Main(stage);		}	}}import flash.geom.Rectangle;import flash.utils.setTimeout;import starling.core.Starling;import starling.display.Sprite;import starling.events.EnterFrameEvent;import starling.events.Event;import starling.events.ResizeEvent;import starling.extensions.PDParticleSystem;import starling.textures.Texture;import flash.display.MovieClip;import leap.LeapInterface;import objects.Star;internal class MainView extends Sprite{	private var starArr:Array = new Array();	// 星が出現する間隔	private var sec_star:Number = 2000;		public function MainView()	{		addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);	}		private function addedToStageHandler(event:Event):void	{		// sec_starおきに星を生成する関数を呼ぶ		setTimeout(createStar, sec_star);				stage.addEventListener(ResizeEvent.RESIZE, stage_resizeHandler);		addEventListener(EnterFrameEvent.ENTER_FRAME, onEnterFrame);	}		private function createStar():void{		var star:Star = new Star();		starArr.push(star);		addChild(star);		// 星の出現する間隔を徐々に短くする処理		sec_star -= 50;		setTimeout(createStar, sec_star);	}		private function stage_resizeHandler(event:ResizeEvent):void	{		Starling.current.viewPort = new Rectangle(0, 0, event.width, event.height);		stage.stageWidth = event.width;		stage.stageHeight = event.height;	}		private function onEnterFrame(e:EnterFrameEvent):void{		for(var i:uint = 0; i < starArr.length; i++){			var s:Star = starArr[i];						if(s.delete_flag){				starArr.splice(i, 1);				removeChild(s);				continue;			}						if(s.move_flag){				// 加速度を速度に加算				if(s.vx > 0){					s.vx += s.acceleration;				} else{					s.vx -= s.acceleration;				}				s.vy += s.acceleration;				s.x += s.vx;				s.y += s.vy;			}						// 画面外に出たら消す処理			if(s.x < -10 || s.x > stage.stageWidth + 10 || s.y < -10 || s.y > stage.stageHeight + 10){				starArr.splice(i, 1);				removeChild(s);			}						// プレイヤーとの衝突判定			if(Math.abs(s.x - LeapInterface.Sx) < 40){				if(Math.abs(s.y - LeapInterface.Sy) < 40){					LeapInterface.occurCollision(s);				}			} else {				//LeapInterface.endCollision();			}					}	}}